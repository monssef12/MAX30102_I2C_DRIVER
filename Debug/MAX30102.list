
MAX30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f64  08003f64  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f64  08003f64  00004f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f6c  08003f6c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f6c  08003f6c  00004f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f70  08003f70  00004f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08003fd0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003fd0  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a791  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001801  00000000  00000000  0000f81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00011020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000748  00000000  00000000  00011970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015db9  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c26d  00000000  00000000  00027e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ad5  00000000  00000000  000340de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbbb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b94  00000000  00000000  000bbbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000be78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003edc 	.word	0x08003edc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003edc 	.word	0x08003edc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09a      	sub	sp, #104	@ 0x68
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fc63 	bl	8000e8c <HAL_Init>

  /* USER CODE BEGIN Init */

  // Configuration parameters

  MODE_CONFIG mode_config = {0, 0, 0x011};
 80005c6:	2300      	movs	r3, #0
 80005c8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80005d2:	2311      	movs	r3, #17
 80005d4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  SPO2_CONFIG spo2_config = {1, 3, 4};
 80005d8:	4a34      	ldr	r2, [pc, #208]	@ (80006ac <main+0xf0>)
 80005da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005de:	6812      	ldr	r2, [r2, #0]
 80005e0:	4611      	mov	r1, r2
 80005e2:	8019      	strh	r1, [r3, #0]
 80005e4:	3302      	adds	r3, #2
 80005e6:	0c12      	lsrs	r2, r2, #16
 80005e8:	701a      	strb	r2, [r3, #0]
  FIFO_CONFIG fifo_config = {0, 0, 0};
 80005ea:	2300      	movs	r3, #0
 80005ec:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80005f6:	2300      	movs	r3, #0
 80005f8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  LED_PULSE led_pulse = {0x02, 0x02};
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <main+0xf4>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

  // Data buffers
  MAX30102_DATA max30102_data = {0, 0};
 8000604:	2300      	movs	r3, #0
 8000606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  char uart_message[64];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f85a 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f910 	bl	8000834 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000614:	f000 f8b6 	bl	8000784 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f8e2 	bl	80007e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // clear the interrupts enable registers to not activate interrupts
  uint8_t interr_en = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	71fb      	strb	r3, [r7, #7]
  WriteRegister(&hi2c1, (MAX30102_ADDR<<1) | 1, INTERRUPT_ENABLE_1, &interr_en, 1);
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	2201      	movs	r2, #1
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	2202      	movs	r2, #2
 8000628:	21af      	movs	r1, #175	@ 0xaf
 800062a:	4822      	ldr	r0, [pc, #136]	@ (80006b4 <main+0xf8>)
 800062c:	f000 f94b 	bl	80008c6 <WriteRegister>
  WriteRegister(&hi2c1, (MAX30102_ADDR<<1) | 1, INTERRUPT_ENABLE_2, &interr_en, 1);
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	2201      	movs	r2, #1
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	2203      	movs	r2, #3
 8000638:	21af      	movs	r1, #175	@ 0xaf
 800063a:	481e      	ldr	r0, [pc, #120]	@ (80006b4 <main+0xf8>)
 800063c:	f000 f943 	bl	80008c6 <WriteRegister>

  SetConfiguration(&hi2c1, &mode_config, &spo2_config, &fifo_config, &led_pulse);
 8000640:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000644:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000648:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800064c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4603      	mov	r3, r0
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <main+0xf8>)
 8000656:	f000 f951 	bl	80008fc <SetConfiguration>
  /* USER CODE END 2 */
  HAL_UART_Transmit(&huart1, (uint8_t *)"TEST\r\n", 6, HAL_MAX_DELAY);
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2206      	movs	r2, #6
 8000660:	4915      	ldr	r1, [pc, #84]	@ (80006b8 <main+0xfc>)
 8000662:	4816      	ldr	r0, [pc, #88]	@ (80006bc <main+0x100>)
 8000664:	f002 fbde 	bl	8002e24 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(2);
 8000668:	2002      	movs	r0, #2
 800066a:	f000 fc81 	bl	8000f70 <HAL_Delay>
	  ReadSample(&hi2c1, &max30102_data, &mode_config);
 800066e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000672:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000676:	4619      	mov	r1, r3
 8000678:	480e      	ldr	r0, [pc, #56]	@ (80006b4 <main+0xf8>)
 800067a:	f000 f9ee 	bl	8000a5a <ReadSample>

	  sprintf(uart_message, "IR:%lu, RED:%lu\r\n", max30102_data.IR_DATA, max30102_data.RED_DATA);
 800067e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000682:	f107 0008 	add.w	r0, r7, #8
 8000686:	490e      	ldr	r1, [pc, #56]	@ (80006c0 <main+0x104>)
 8000688:	f002 ff88 	bl	800359c <siprintf>

	  HAL_UART_Transmit(&huart1, ( uint8_t *)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fda5 	bl	80001e0 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <main+0x100>)
 80006a4:	f002 fbbe 	bl	8002e24 <HAL_UART_Transmit>
	  HAL_Delay(2);
 80006a8:	bf00      	nop
 80006aa:	e7dd      	b.n	8000668 <main+0xac>
 80006ac:	08003f10 	.word	0x08003f10
 80006b0:	08003f14 	.word	0x08003f14
 80006b4:	20000078 	.word	0x20000078
 80006b8:	08003ef4 	.word	0x08003ef4
 80006bc:	200000cc 	.word	0x200000cc
 80006c0:	08003efc 	.word	0x08003efc

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 ff84 	bl	80035e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <SystemClock_Config+0xb8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <SystemClock_Config+0xb8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <SystemClock_Config+0xb8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <SystemClock_Config+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <SystemClock_Config+0xbc>)
 8000712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <SystemClock_Config+0xbc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fecb 	bl	80024d4 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000744:	f000 f89e 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f002 f92e 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800076e:	f000 f889 	bl	8000884 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_I2C1_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_I2C1_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_I2C1_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <MX_I2C1_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_I2C1_Init+0x50>)
 80007c2:	f000 fe63 	bl	800148c <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 f85a 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000078 	.word	0x20000078
 80007d8:	40005400 	.word	0x40005400
 80007dc:	000186a0 	.word	0x000186a0

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART1_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART1_UART_Init+0x4c>)
 8000818:	f002 fab4 	bl	8002d84 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f82f 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000cc 	.word	0x200000cc
 8000830:	40011000 	.word	0x40011000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_GPIO_Init+0x4c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_GPIO_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_GPIO_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <ReadRegister>:
 *  Created on: Jul 16, 2025
 *      Author: monci
 */
#include "max30102_driver.h"

HAL_StatusTypeDef ReadRegister(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t Register, uint8_t *pData, uint16_t Size){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af04      	add	r7, sp, #16
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	4613      	mov	r3, r2
 80008a0:	813b      	strh	r3, [r7, #8]

	return HAL_I2C_Mem_Read(hi2c, DevAddress, Register, 1, pData, Size, HAL_MAX_DELAY);
 80008a2:	893a      	ldrh	r2, [r7, #8]
 80008a4:	8979      	ldrh	r1, [r7, #10]
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	8b3b      	ldrh	r3, [r7, #24]
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f001 f826 	bl	8001908 <HAL_I2C_Mem_Read>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <WriteRegister>:

HAL_StatusTypeDef WriteRegister(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t Register, uint8_t *pData, uint16_t Size){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af04      	add	r7, sp, #16
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	817b      	strh	r3, [r7, #10]
 80008d4:	4613      	mov	r3, r2
 80008d6:	813b      	strh	r3, [r7, #8]

	return HAL_I2C_Mem_Write(hi2c, DevAddress, Register, 1, pData, Size, HAL_MAX_DELAY);
 80008d8:	893a      	ldrh	r2, [r7, #8]
 80008da:	8979      	ldrh	r1, [r7, #10]
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	8b3b      	ldrh	r3, [r7, #24]
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 ff11 	bl	8001714 <HAL_I2C_Mem_Write>
 80008f2:	4603      	mov	r3, r0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SetConfiguration>:

HAL_StatusTypeDef SetConfiguration(I2C_HandleTypeDef *hi2c, MODE_CONFIG *mode_configuration, SPO2_CONFIG *spo2_configuration, FIFO_CONFIG *fifo_configuration, LED_PULSE *led_pulse){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af02      	add	r7, sp, #8
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	603b      	str	r3, [r7, #0]

	/*Write the mode configuration*/
	uint8_t mode = (mode_configuration -> SHDN << 7) | (mode_configuration -> RESET << 6) | (mode_configuration -> MODE);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	01db      	lsls	r3, r3, #7
 8000912:	b25a      	sxtb	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	b25b      	sxtb	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b25a      	sxtb	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	b25b      	sxtb	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	b25b      	sxtb	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status = WriteRegister(hi2c, (MAX30102_ADDR<<1) , MODE_CONFIGURATION, &mode, 1);
 8000930:	f107 0316 	add.w	r3, r7, #22
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2209      	movs	r2, #9
 800093a:	21ae      	movs	r1, #174	@ 0xae
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff ffc2 	bl	80008c6 <WriteRegister>
 8000942:	4603      	mov	r3, r0
 8000944:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SetConfiguration+0x54>
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	e080      	b.n	8000a52 <SetConfiguration+0x156>

	/*Write the spo2 configuration*/
    uint8_t spo2 = (spo2_configuration -> SPO2_ADC_RGE << 5) | (spo2_configuration -> SPO2_SR << 2) | spo2_configuration -> SPO2_SR ;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b25b      	sxtb	r3, r3
 8000956:	015b      	lsls	r3, r3, #5
 8000958:	b25a      	sxtb	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	b25b      	sxtb	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b25a      	sxtb	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	757b      	strb	r3, [r7, #21]
	status = WriteRegister(hi2c, (MAX30102_ADDR<<1) , SPO2_CONFIGURATION, &spo2, 1);
 8000976:	f107 0315 	add.w	r3, r7, #21
 800097a:	2201      	movs	r2, #1
 800097c:	9200      	str	r2, [sp, #0]
 800097e:	220a      	movs	r2, #10
 8000980:	21ae      	movs	r1, #174	@ 0xae
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f7ff ff9f 	bl	80008c6 <WriteRegister>
 8000988:	4603      	mov	r3, r0
 800098a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SetConfiguration+0x9a>
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	e05d      	b.n	8000a52 <SetConfiguration+0x156>

    /*Write the LEDs configuration*/
    uint8_t led1_pa = led_pulse -> LED1_PA;
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	753b      	strb	r3, [r7, #20]
	status = WriteRegister(hi2c, (MAX30102_ADDR<<1) , LED_PULSE_1, &led1_pa, 1);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2201      	movs	r2, #1
 80009a2:	9200      	str	r2, [sp, #0]
 80009a4:	220c      	movs	r2, #12
 80009a6:	21ae      	movs	r1, #174	@ 0xae
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff ff8c 	bl	80008c6 <WriteRegister>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SetConfiguration+0xc0>
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	e04a      	b.n	8000a52 <SetConfiguration+0x156>
    uint8_t led2_pa = led_pulse -> LED2_PA;
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	785b      	ldrb	r3, [r3, #1]
 80009c0:	74fb      	strb	r3, [r7, #19]
	status = WriteRegister(hi2c, (MAX30102_ADDR<<1) , LED_PULSE_2, &led2_pa, 1);
 80009c2:	f107 0313 	add.w	r3, r7, #19
 80009c6:	2201      	movs	r2, #1
 80009c8:	9200      	str	r2, [sp, #0]
 80009ca:	220d      	movs	r2, #13
 80009cc:	21ae      	movs	r1, #174	@ 0xae
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff ff79 	bl	80008c6 <WriteRegister>
 80009d4:	4603      	mov	r3, r0
 80009d6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SetConfiguration+0xe6>
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	e037      	b.n	8000a52 <SetConfiguration+0x156>

    /*Write the FIFO configuration*/
    uint8_t fifo_config = (fifo_configuration -> SMP_AVE << 5) | (fifo_configuration -> FIFO_ROLLOVER_EN << 4) | fifo_configuration -> FIFO_A_FULL;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	015b      	lsls	r3, r3, #5
 80009ea:	b25a      	sxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b25a      	sxtb	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	789b      	ldrb	r3, [r3, #2]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	74bb      	strb	r3, [r7, #18]
	status = WriteRegister(hi2c, (MAX30102_ADDR<<1) , SPO2_CONFIGURATION, &fifo_config, 1);
 8000a08:	f107 0312 	add.w	r3, r7, #18
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	220a      	movs	r2, #10
 8000a12:	21ae      	movs	r1, #174	@ 0xae
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff ff56 	bl	80008c6 <WriteRegister>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SetConfiguration+0x12c>
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	e014      	b.n	8000a52 <SetConfiguration+0x156>

    /*clear the read and the write pointers to avoid reading old data*/
    uint8_t RESET = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	747b      	strb	r3, [r7, #17]
    WriteRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_READ_PTR, &RESET, 1);
 8000a2c:	f107 0311 	add.w	r3, r7, #17
 8000a30:	2201      	movs	r2, #1
 8000a32:	9200      	str	r2, [sp, #0]
 8000a34:	2206      	movs	r2, #6
 8000a36:	21ae      	movs	r1, #174	@ 0xae
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f7ff ff44 	bl	80008c6 <WriteRegister>
    WriteRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_WRITE_PTR, &RESET, 1);
 8000a3e:	f107 0311 	add.w	r3, r7, #17
 8000a42:	2201      	movs	r2, #1
 8000a44:	9200      	str	r2, [sp, #0]
 8000a46:	2204      	movs	r2, #4
 8000a48:	21ae      	movs	r1, #174	@ 0xae
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f7ff ff3b 	bl	80008c6 <WriteRegister>

    return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <ReadSample>:

HAL_StatusTypeDef ReadSample(I2C_HandleTypeDef *hi2c, MAX30102_DATA *Sampled_Data, MODE_CONFIG *mode_configuration){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b088      	sub	sp, #32
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]

	uint8_t READ_PTR;
	uint8_t WRITE_PTR;
	uint8_t Temp_Data = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	74bb      	strb	r3, [r7, #18]
	Sampled_Data -> IR_DATA = 0;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
	Sampled_Data -> RED_DATA = 0;
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]

	ReadRegister(hi2c,  (MAX30102_ADDR<<1) | 1, FIFO_READ_PTR, &READ_PTR, 1);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	2206      	movs	r2, #6
 8000a80:	21af      	movs	r1, #175	@ 0xaf
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff ff04 	bl	8000890 <ReadRegister>
	ReadRegister(hi2c,  (MAX30102_ADDR<<1) | 1, FIFO_WRITE_PTR, &WRITE_PTR, 1);
 8000a88:	f107 0313 	add.w	r3, r7, #19
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	9200      	str	r2, [sp, #0]
 8000a90:	2204      	movs	r2, #4
 8000a92:	21af      	movs	r1, #175	@ 0xaf
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fefb 	bl	8000890 <ReadRegister>

	uint8_t Unread_samples =  ( WRITE_PTR - READ_PTR ) & 0x1F;
 8000a9a:	7cfa      	ldrb	r2, [r7, #19]
 8000a9c:	7d3b      	ldrb	r3, [r7, #20]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	75fb      	strb	r3, [r7, #23]

	if (Unread_samples == 1){ // i will assume i will be reading only one sample at the time without overflow
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	f040 808e 	bne.w	8000bcc <ReadSample+0x172>
		if(mode_configuration -> MODE == 0b010 || mode_configuration -> MODE == 0b011){ // Heart rate mode
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d003      	beq.n	8000ac0 <ReadSample+0x66>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	789b      	ldrb	r3, [r3, #2]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d140      	bne.n	8000b42 <ReadSample+0xe8>
			HAL_StatusTypeDef status = ReadRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_DATA, &Temp_Data, 1);
 8000ac0:	f107 0312 	add.w	r3, r7, #18
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	9200      	str	r2, [sp, #0]
 8000ac8:	2207      	movs	r2, #7
 8000aca:	21ae      	movs	r1, #174	@ 0xae
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fedf 	bl	8000890 <ReadRegister>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) return status;
 8000ad6:	7dbb      	ldrb	r3, [r7, #22]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <ReadSample+0x86>
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	e076      	b.n	8000bce <ReadSample+0x174>
			Sampled_Data -> IR_DATA = ( (uint32_t)Temp_Data  << 16 );
 8000ae0:	7cbb      	ldrb	r3, [r7, #18]
 8000ae2:	041a      	lsls	r2, r3, #16
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	601a      	str	r2, [r3, #0]

			status = ReadRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_DATA, &Temp_Data, 1);
 8000ae8:	f107 0312 	add.w	r3, r7, #18
 8000aec:	2201      	movs	r2, #1
 8000aee:	9200      	str	r2, [sp, #0]
 8000af0:	2207      	movs	r2, #7
 8000af2:	21ae      	movs	r1, #174	@ 0xae
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fecb 	bl	8000890 <ReadRegister>
 8000afa:	4603      	mov	r3, r0
 8000afc:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) return status;
 8000afe:	7dbb      	ldrb	r3, [r7, #22]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <ReadSample+0xae>
 8000b04:	7dbb      	ldrb	r3, [r7, #22]
 8000b06:	e062      	b.n	8000bce <ReadSample+0x174>
			Sampled_Data -> IR_DATA |= ( (uint32_t)Temp_Data << 8 );
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	7cbb      	ldrb	r3, [r7, #18]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	431a      	orrs	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	601a      	str	r2, [r3, #0]

			status = ReadRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_DATA, &Temp_Data, 1);
 8000b16:	f107 0312 	add.w	r3, r7, #18
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	2207      	movs	r2, #7
 8000b20:	21ae      	movs	r1, #174	@ 0xae
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff feb4 	bl	8000890 <ReadRegister>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) return status;
 8000b2c:	7dbb      	ldrb	r3, [r7, #22]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <ReadSample+0xdc>
 8000b32:	7dbb      	ldrb	r3, [r7, #22]
 8000b34:	e04b      	b.n	8000bce <ReadSample+0x174>
			Sampled_Data -> IR_DATA |= Temp_Data;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7cba      	ldrb	r2, [r7, #18]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	601a      	str	r2, [r3, #0]
		}
		if (mode_configuration -> MODE == 0b011){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d140      	bne.n	8000bcc <ReadSample+0x172>
			HAL_StatusTypeDef status = ReadRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_DATA, &Temp_Data, 1);
 8000b4a:	f107 0312 	add.w	r3, r7, #18
 8000b4e:	2201      	movs	r2, #1
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	2207      	movs	r2, #7
 8000b54:	21ae      	movs	r1, #174	@ 0xae
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fe9a 	bl	8000890 <ReadRegister>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	757b      	strb	r3, [r7, #21]
		    if (status != HAL_OK) return status;
 8000b60:	7d7b      	ldrb	r3, [r7, #21]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <ReadSample+0x110>
 8000b66:	7d7b      	ldrb	r3, [r7, #21]
 8000b68:	e031      	b.n	8000bce <ReadSample+0x174>
			Sampled_Data -> RED_DATA = ( (uint32_t)Temp_Data  << 16 );
 8000b6a:	7cbb      	ldrb	r3, [r7, #18]
 8000b6c:	041a      	lsls	r2, r3, #16
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	605a      	str	r2, [r3, #4]

			status = ReadRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_DATA, &Temp_Data, 1);
 8000b72:	f107 0312 	add.w	r3, r7, #18
 8000b76:	2201      	movs	r2, #1
 8000b78:	9200      	str	r2, [sp, #0]
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	21ae      	movs	r1, #174	@ 0xae
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fe86 	bl	8000890 <ReadRegister>
 8000b84:	4603      	mov	r3, r0
 8000b86:	757b      	strb	r3, [r7, #21]
		    if (status != HAL_OK) return status;
 8000b88:	7d7b      	ldrb	r3, [r7, #21]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <ReadSample+0x138>
 8000b8e:	7d7b      	ldrb	r3, [r7, #21]
 8000b90:	e01d      	b.n	8000bce <ReadSample+0x174>
			Sampled_Data -> RED_DATA |= ( (uint32_t) Temp_Data << 8 );
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	7cbb      	ldrb	r3, [r7, #18]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	605a      	str	r2, [r3, #4]

			status = ReadRegister(hi2c, (MAX30102_ADDR<<1) , FIFO_DATA, &Temp_Data, 1);
 8000ba0:	f107 0312 	add.w	r3, r7, #18
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	9200      	str	r2, [sp, #0]
 8000ba8:	2207      	movs	r2, #7
 8000baa:	21ae      	movs	r1, #174	@ 0xae
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff fe6f 	bl	8000890 <ReadRegister>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	757b      	strb	r3, [r7, #21]
		    if (status != HAL_OK) return status;
 8000bb6:	7d7b      	ldrb	r3, [r7, #21]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <ReadSample+0x166>
 8000bbc:	7d7b      	ldrb	r3, [r7, #21]
 8000bbe:	e006      	b.n	8000bce <ReadSample+0x174>
			Sampled_Data -> RED_DATA |= Temp_Data;
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	7cba      	ldrb	r2, [r7, #18]
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	605a      	str	r2, [r3, #4]
		}
	}
	return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	@ (8000cac <HAL_I2C_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12b      	bne.n	8000ca2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a17      	ldr	r2, [pc, #92]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c66:	23c0      	movs	r3, #192	@ 0xc0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6a:	2312      	movs	r3, #18
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c76:	2304      	movs	r3, #4
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <HAL_I2C_MspInit+0x8c>)
 8000c82:	f000 fa7f 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	@ 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <HAL_UART_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12c      	bne.n	8000d34 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d24:	2307      	movs	r3, #7
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_UART_MspInit+0x8c>)
 8000d30:	f000 fa28 	bl	8001184 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	@ 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 f8c7 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f002 fc0a 	bl	80035f0 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20018000 	.word	0x20018000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000114 	.word	0x20000114
 8000e10:	20000268 	.word	0x20000268

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 fbc9 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fba7 	bl	80005bc <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e7c:	08003f74 	.word	0x08003f74
  ldr r2, =_sbss
 8000e80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e84:	20000264 	.word	0x20000264

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f931 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe8a 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f93b 	bl	800116a <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f911 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000118 	.word	0x20000118

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000118 	.word	0x20000118

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	@ (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e159      	b.n	8001454 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8148 	bne.w	800144e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a2 	beq.w	800144e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b57      	ldr	r3, [pc, #348]	@ (800146c <HAL_GPIO_Init+0x2e8>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a56      	ldr	r2, [pc, #344]	@ (800146c <HAL_GPIO_Init+0x2e8>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b54      	ldr	r3, [pc, #336]	@ (800146c <HAL_GPIO_Init+0x2e8>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a52      	ldr	r2, [pc, #328]	@ (8001470 <HAL_GPIO_Init+0x2ec>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a49      	ldr	r2, [pc, #292]	@ (8001474 <HAL_GPIO_Init+0x2f0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x202>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_GPIO_Init+0x2f4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x1fe>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a47      	ldr	r2, [pc, #284]	@ (800147c <HAL_GPIO_Init+0x2f8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x1fa>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a46      	ldr	r2, [pc, #280]	@ (8001480 <HAL_GPIO_Init+0x2fc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x1f6>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a45      	ldr	r2, [pc, #276]	@ (8001484 <HAL_GPIO_Init+0x300>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x1f2>
 8001372:	2304      	movs	r3, #4
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001376:	2307      	movs	r3, #7
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x204>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x204>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	@ (8001470 <HAL_GPIO_Init+0x2ec>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a24      	ldr	r2, [pc, #144]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a1a      	ldr	r2, [pc, #104]	@ (8001488 <HAL_GPIO_Init+0x304>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_GPIO_Init+0x304>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <HAL_GPIO_Init+0x304>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f aea2 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e12b      	b.n	80016f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fbb8 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f0:	f001 fc20 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4a81      	ldr	r2, [pc, #516]	@ (8001700 <HAL_I2C_Init+0x274>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d807      	bhi.n	8001510 <HAL_I2C_Init+0x84>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4a80      	ldr	r2, [pc, #512]	@ (8001704 <HAL_I2C_Init+0x278>)
 8001504:	4293      	cmp	r3, r2
 8001506:	bf94      	ite	ls
 8001508:	2301      	movls	r3, #1
 800150a:	2300      	movhi	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e006      	b.n	800151e <HAL_I2C_Init+0x92>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a7d      	ldr	r2, [pc, #500]	@ (8001708 <HAL_I2C_Init+0x27c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0e7      	b.n	80016f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4a78      	ldr	r2, [pc, #480]	@ (800170c <HAL_I2C_Init+0x280>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a6a      	ldr	r2, [pc, #424]	@ (8001700 <HAL_I2C_Init+0x274>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d802      	bhi.n	8001560 <HAL_I2C_Init+0xd4>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3301      	adds	r3, #1
 800155e:	e009      	b.n	8001574 <HAL_I2C_Init+0xe8>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a69      	ldr	r2, [pc, #420]	@ (8001710 <HAL_I2C_Init+0x284>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	3301      	adds	r3, #1
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001586:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	495c      	ldr	r1, [pc, #368]	@ (8001700 <HAL_I2C_Init+0x274>)
 8001590:	428b      	cmp	r3, r1
 8001592:	d819      	bhi.n	80015c8 <HAL_I2C_Init+0x13c>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e59      	subs	r1, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00a      	beq.n	80015c4 <HAL_I2C_Init+0x138>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1e59      	subs	r1, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	e051      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e04f      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_I2C_Init+0x168>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	e012      	b.n	800161a <HAL_I2C_Init+0x18e>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Init+0x196>
 800161e:	2301      	movs	r3, #1
 8001620:	e022      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <HAL_I2C_Init+0x1bc>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e58      	subs	r0, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	440b      	add	r3, r1
 8001638:	fbb0 f3f3 	udiv	r3, r0, r3
 800163c:	3301      	adds	r3, #1
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001646:	e00f      	b.n	8001668 <HAL_I2C_Init+0x1dc>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	4313      	orrs	r3, r2
 800166e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001696:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6911      	ldr	r1, [r2, #16]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	000186a0 	.word	0x000186a0
 8001704:	001e847f 	.word	0x001e847f
 8001708:	003d08ff 	.word	0x003d08ff
 800170c:	431bde83 	.word	0x431bde83
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	817b      	strh	r3, [r7, #10]
 8001726:	460b      	mov	r3, r1
 8001728:	813b      	strh	r3, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800172e:	f7ff fc13 	bl	8000f58 <HAL_GetTick>
 8001732:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b20      	cmp	r3, #32
 800173e:	f040 80d9 	bne.w	80018f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2319      	movs	r3, #25
 8001748:	2201      	movs	r2, #1
 800174a:	496d      	ldr	r1, [pc, #436]	@ (8001900 <HAL_I2C_Mem_Write+0x1ec>)
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fc8b 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
 800175a:	e0cc      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_I2C_Mem_Write+0x56>
 8001766:	2302      	movs	r3, #2
 8001768:	e0c5      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d007      	beq.n	8001790 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800179e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2221      	movs	r2, #33	@ 0x21
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2240      	movs	r2, #64	@ 0x40
 80017ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001904 <HAL_I2C_Mem_Write+0x1f0>)
 80017d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017d2:	88f8      	ldrh	r0, [r7, #6]
 80017d4:	893a      	ldrh	r2, [r7, #8]
 80017d6:	8979      	ldrh	r1, [r7, #10]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4603      	mov	r3, r0
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fac2 	bl	8001d6c <I2C_RequestMemoryWrite>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d052      	beq.n	8001894 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e081      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fd50 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00d      	beq.n	800181e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	2b04      	cmp	r3, #4
 8001808:	d107      	bne.n	800181a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001818:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06b      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d11b      	bne.n	8001894 <HAL_I2C_Mem_Write+0x180>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d017      	beq.n	8001894 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1aa      	bne.n	80017f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fd43 	bl	800232c <I2C_WaitOnBTFFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00d      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e016      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	00100002 	.word	0x00100002
 8001904:	ffff0000 	.word	0xffff0000

08001908 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4603      	mov	r3, r0
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	460b      	mov	r3, r1
 800191c:	813b      	strh	r3, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001922:	f7ff fb19 	bl	8000f58 <HAL_GetTick>
 8001926:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b20      	cmp	r3, #32
 8001932:	f040 8214 	bne.w	8001d5e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2319      	movs	r3, #25
 800193c:	2201      	movs	r2, #1
 800193e:	497b      	ldr	r1, [pc, #492]	@ (8001b2c <HAL_I2C_Mem_Read+0x224>)
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fb91 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
 800194e:	e207      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_I2C_Mem_Read+0x56>
 800195a:	2302      	movs	r3, #2
 800195c:	e200      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d007      	beq.n	8001984 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2222      	movs	r2, #34	@ 0x22
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b30 <HAL_I2C_Mem_Read+0x228>)
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c6:	88f8      	ldrh	r0, [r7, #6]
 80019c8:	893a      	ldrh	r2, [r7, #8]
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4603      	mov	r3, r0
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fa5e 	bl	8001e98 <I2C_RequestMemoryRead>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1bc      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d113      	bne.n	8001a16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e190      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d11b      	bne.n	8001a56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e170      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d11b      	bne.n	8001a96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	e150      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001aac:	e144      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	f200 80f1 	bhi.w	8001c9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d123      	bne.n	8001b08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fc79 	bl	80023bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e145      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b06:	e117      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d14e      	bne.n	8001bae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b16:	2200      	movs	r2, #0
 8001b18:	4906      	ldr	r1, [pc, #24]	@ (8001b34 <HAL_I2C_Mem_Read+0x22c>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 faa4 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e11a      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
 8001b2a:	bf00      	nop
 8001b2c:	00100002 	.word	0x00100002
 8001b30:	ffff0000 	.word	0xffff0000
 8001b34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bac:	e0c4      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	496c      	ldr	r1, [pc, #432]	@ (8001d68 <HAL_I2C_Mem_Read+0x460>)
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fa55 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cb      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c10:	2200      	movs	r2, #0
 8001c12:	4955      	ldr	r1, [pc, #340]	@ (8001d68 <HAL_I2C_Mem_Read+0x460>)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fa27 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e09d      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c98:	e04e      	b.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fb8c 	bl	80023bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e058      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d124      	bne.n	8001d38 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f aeb6 	bne.w	8001aae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00010004 	.word	0x00010004

08001d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	813b      	strh	r3, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f960 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dbc:	d103      	bne.n	8001dc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e05f      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	492d      	ldr	r1, [pc, #180]	@ (8001e94 <I2C_RequestMemoryWrite+0x128>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f9bb 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e04c      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fa46 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d107      	bne.n	8001e2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e02b      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e38:	893b      	ldrh	r3, [r7, #8]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e021      	b.n	8001e88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa20 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d107      	bne.n	8001e7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e005      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	00010002 	.word	0x00010002

08001e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f8c2 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00d      	beq.n	8001f06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef8:	d103      	bne.n	8001f02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0aa      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f06:	897b      	ldrh	r3, [r7, #10]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	4952      	ldr	r1, [pc, #328]	@ (8002064 <I2C_RequestMemoryRead+0x1cc>)
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f91d 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e097      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f9a8 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d107      	bne.n	8001f6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e076      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f74:	893b      	ldrh	r3, [r7, #8]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	e021      	b.n	8001fc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f80:	893b      	ldrh	r3, [r7, #8]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f982 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e050      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fba:	893b      	ldrh	r3, [r7, #8]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	6a39      	ldr	r1, [r7, #32]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f967 	bl	800229c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e035      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2200      	movs	r2, #0
 8002008:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f82b 	bl	8002068 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002026:	d103      	bne.n	8002030 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e013      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002034:	897b      	ldrh	r3, [r7, #10]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	4906      	ldr	r1, [pc, #24]	@ (8002064 <I2C_RequestMemoryRead+0x1cc>)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f886 	bl	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00010002 	.word	0x00010002

08002068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002078:	e048      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d044      	beq.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7fe ff69 	bl	8000f58 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d139      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10d      	bne.n	80020be <I2C_WaitOnFlagUntilTimeout+0x56>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	43da      	mvns	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	e00c      	b.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d116      	bne.n	800210c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e023      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10d      	bne.n	8002132 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	e00c      	b.n	800214c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	429a      	cmp	r2, r3
 8002150:	d093      	beq.n	800207a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800216a:	e071      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d123      	bne.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800218a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002194:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e067      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d041      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7fe fec4 	bl	8000f58 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d136      	bne.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10c      	bne.n	8002206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4013      	ands	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e00b      	b.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	43da      	mvns	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4013      	ands	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e021      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10c      	bne.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	43da      	mvns	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e00b      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f af6d 	bne.w	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a8:	e034      	b.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8e3 	bl	8002476 <I2C_IsAcknowledgeFailed>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e034      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d028      	beq.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7fe fe49 	bl	8000f58 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11d      	bne.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b80      	cmp	r3, #128	@ 0x80
 80022e4:	d016      	beq.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b80      	cmp	r3, #128	@ 0x80
 8002320:	d1c3      	bne.n	80022aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002338:	e034      	b.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f89b 	bl	8002476 <I2C_IsAcknowledgeFailed>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e034      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d028      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe fe01 	bl	8000f58 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d016      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d1c3      	bne.n	800233a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023c8:	e049      	b.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d119      	bne.n	800240c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0210 	mvn.w	r2, #16
 80023e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e030      	b.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240c:	f7fe fda4 	bl	8000f58 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d302      	bcc.n	8002422 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11d      	bne.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242c:	2b40      	cmp	r3, #64	@ 0x40
 800242e:	d016      	beq.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e007      	b.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	d1ae      	bne.n	80023ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248c:	d11b      	bne.n	80024c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002496:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f043 0204 	orr.w	r2, r3, #4
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e267      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024f2:	4b88      	ldr	r3, [pc, #544]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d00c      	beq.n	8002518 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b85      	ldr	r3, [pc, #532]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002506:	2b08      	cmp	r3, #8
 8002508:	d112      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b7e      	ldr	r3, [pc, #504]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e242      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x74>
 800253a:	4b76      	ldr	r3, [pc, #472]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a75      	ldr	r2, [pc, #468]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6f      	ldr	r2, [pc, #444]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6c      	ldr	r2, [pc, #432]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 800256c:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fce4 	bl	8000f58 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fce0 	bl	8000f58 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e207      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xc0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe fcd0 	bl	8000f58 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe fccc 	bl	8000f58 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1f3      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b51      	ldr	r3, [pc, #324]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d063      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4937      	ldr	r1, [pc, #220]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e03a      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fc85 	bl	8000f58 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fc81 	bl	8000f58 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1a8      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4925      	ldr	r1, [pc, #148]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x244>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fc64 	bl	8000f58 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe fc60 	bl	8000f58 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e187      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fc44 	bl	8000f58 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe fc40 	bl	8000f58 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e167      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_OscConfig+0x240>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_OscConfig+0x248>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fc2d 	bl	8000f58 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00e      	b.n	8002720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe fc29 	bl	8000f58 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d907      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e150      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ea      	bne.n	8002702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b81      	ldr	r3, [pc, #516]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a7c      	ldr	r2, [pc, #496]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b7a      	ldr	r3, [pc, #488]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b77      	ldr	r3, [pc, #476]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe fbe9 	bl	8000f58 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fbe5 	bl	8000f58 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e10c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_OscConfig+0x474>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x2ea>
 80027b0:	4b64      	ldr	r3, [pc, #400]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a63      	ldr	r2, [pc, #396]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x30c>
 80027c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x324>
 80027e0:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a54      	ldr	r2, [pc, #336]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fbaa 	bl	8000f58 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fba6 	bl	8000f58 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0cb      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCC_OscConfig+0x334>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fb94 	bl	8000f58 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe fb90 	bl	8000f58 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0b5      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	4b3e      	ldr	r3, [pc, #248]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ee      	bne.n	8002834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a38      	ldr	r2, [pc, #224]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a1 	beq.w	80029b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d05c      	beq.n	8002938 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d141      	bne.n	800290a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fb64 	bl	8000f58 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb60 	bl	8000f58 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	491b      	ldr	r1, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fb39 	bl	8000f58 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fb35 	bl	8000f58 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e05c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x416>
 8002908:	e054      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x478>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fb22 	bl	8000f58 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fb1e 	bl	8000f58 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e045      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_OscConfig+0x470>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e038      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x4ec>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fa50 	bl	8000f58 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fa4c 	bl	8000f58 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f821 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f9b0 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08003f18 	.word	0x08003f18
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	20000004 	.word	0x20000004

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b090      	sub	sp, #64	@ 0x40
 8002b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba8:	4b59      	ldr	r3, [pc, #356]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	f200 80a1 	bhi.w	8002cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc2:	e09b      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bc8:	e09b      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bca:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bce:	e098      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bda:	4b4d      	ldr	r3, [pc, #308]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	2200      	movs	r2, #0
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfc:	fb03 f201 	mul.w	r2, r3, r1
 8002c00:	2300      	movs	r3, #0
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	4a43      	ldr	r2, [pc, #268]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c10:	460a      	mov	r2, r1
 8002c12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c16:	4413      	add	r3, r2
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	61fa      	str	r2, [r7, #28]
 8002c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c2a:	f7fd fb31 	bl	8000290 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c36:	e053      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c38:	4b35      	ldr	r3, [pc, #212]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	2200      	movs	r2, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	617a      	str	r2, [r7, #20]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c4a:	f04f 0b00 	mov.w	fp, #0
 8002c4e:	4652      	mov	r2, sl
 8002c50:	465b      	mov	r3, fp
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ebb2 080a 	subs.w	r8, r2, sl
 8002c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c82:	ebb2 0408 	subs.w	r4, r2, r8
 8002c86:	eb63 0509 	sbc.w	r5, r3, r9
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	00eb      	lsls	r3, r5, #3
 8002c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c98:	00e2      	lsls	r2, r4, #3
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	eb45 030b 	adc.w	r3, r5, fp
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	60fa      	str	r2, [r7, #12]
 8002cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd4:	f7fd fadc 	bl	8000290 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002cf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3740      	adds	r7, #64	@ 0x40
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	017d7840 	.word	0x017d7840

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08003f28 	.word	0x08003f28

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffdc 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08003f28 	.word	0x08003f28

08002d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e042      	b.n	8002e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd ff84 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f973 	bl	80030b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d175      	bne.n	8002f30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Transmit+0x2c>
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e06e      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2221      	movs	r2, #33	@ 0x21
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e62:	f7fe f879 	bl	8000f58 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7c:	d108      	bne.n	8002e90 <HAL_UART_Transmit+0x6c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e003      	b.n	8002e98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e98:	e02e      	b.n	8002ef8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	@ 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f848 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e03a      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10b      	bne.n	8002eda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e007      	b.n	8002eea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1cb      	bne.n	8002e9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2140      	movs	r1, #64	@ 0x40
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f814 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e006      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	e03b      	b.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d037      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f54:	f7fe f800 	bl	8000f58 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d302      	bcc.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e03a      	b.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d020      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	d01d      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d116      	bne.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f81d 	bl	8002fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e00f      	b.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d0b4      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b095      	sub	sp, #84	@ 0x54
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800300a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003014:	643a      	str	r2, [r7, #64]	@ 0x40
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800301a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	61fb      	str	r3, [r7, #28]
   return(result);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800304e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	2b01      	cmp	r3, #1
 8003062:	d119      	bne.n	8003098 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	60bb      	str	r3, [r7, #8]
   return(result);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f023 0310 	bic.w	r3, r3, #16
 800307a:	647b      	str	r3, [r7, #68]	@ 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003084:	61ba      	str	r2, [r7, #24]
 8003086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6979      	ldr	r1, [r7, #20]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	613b      	str	r3, [r7, #16]
   return(result);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e5      	bne.n	8003064 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030a6:	bf00      	nop
 80030a8:	3754      	adds	r7, #84	@ 0x54
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b0c0      	sub	sp, #256	@ 0x100
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	68d9      	ldr	r1, [r3, #12]
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	ea40 0301 	orr.w	r3, r0, r1
 80030dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800310c:	f021 010c 	bic.w	r1, r1, #12
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800311a:	430b      	orrs	r3, r1
 800311c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	6999      	ldr	r1, [r3, #24]
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	ea40 0301 	orr.w	r3, r0, r1
 800313a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b8f      	ldr	r3, [pc, #572]	@ (8003380 <UART_SetConfig+0x2cc>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d005      	beq.n	8003154 <UART_SetConfig+0xa0>
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b8d      	ldr	r3, [pc, #564]	@ (8003384 <UART_SetConfig+0x2d0>)
 8003150:	429a      	cmp	r2, r3
 8003152:	d104      	bne.n	800315e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7ff fe02 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800315c:	e003      	b.n	8003166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7ff fde9 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8003162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003170:	f040 810c 	bne.w	800338c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800317e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003186:	4622      	mov	r2, r4
 8003188:	462b      	mov	r3, r5
 800318a:	1891      	adds	r1, r2, r2
 800318c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800318e:	415b      	adcs	r3, r3
 8003190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003196:	4621      	mov	r1, r4
 8003198:	eb12 0801 	adds.w	r8, r2, r1
 800319c:	4629      	mov	r1, r5
 800319e:	eb43 0901 	adc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031c4:	462b      	mov	r3, r5
 80031c6:	eb49 0303 	adc.w	r3, r9, r3
 80031ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031e2:	460b      	mov	r3, r1
 80031e4:	18db      	adds	r3, r3, r3
 80031e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80031e8:	4613      	mov	r3, r2
 80031ea:	eb42 0303 	adc.w	r3, r2, r3
 80031ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80031f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031f8:	f7fd f84a 	bl	8000290 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <UART_SetConfig+0x2d4>)
 8003202:	fba3 2302 	umull	r2, r3, r3, r2
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	011c      	lsls	r4, r3, #4
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	1891      	adds	r1, r2, r2
 8003222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003224:	415b      	adcs	r3, r3
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800322c:	4641      	mov	r1, r8
 800322e:	eb12 0a01 	adds.w	sl, r2, r1
 8003232:	4649      	mov	r1, r9
 8003234:	eb43 0b01 	adc.w	fp, r3, r1
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800324c:	4692      	mov	sl, r2
 800324e:	469b      	mov	fp, r3
 8003250:	4643      	mov	r3, r8
 8003252:	eb1a 0303 	adds.w	r3, sl, r3
 8003256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800325a:	464b      	mov	r3, r9
 800325c:	eb4b 0303 	adc.w	r3, fp, r3
 8003260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	643b      	str	r3, [r7, #64]	@ 0x40
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	647b      	str	r3, [r7, #68]	@ 0x44
 8003286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800328a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800328e:	f7fc ffff 	bl	8000290 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4611      	mov	r1, r2
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <UART_SetConfig+0x2d4>)
 800329a:	fba3 2301 	umull	r2, r3, r3, r1
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2264      	movs	r2, #100	@ 0x64
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	1acb      	subs	r3, r1, r3
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032ae:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <UART_SetConfig+0x2d4>)
 80032b0:	fba3 2302 	umull	r2, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032bc:	441c      	add	r4, r3
 80032be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	1891      	adds	r1, r2, r2
 80032d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032d8:	415b      	adcs	r3, r3
 80032da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032e0:	4641      	mov	r1, r8
 80032e2:	1851      	adds	r1, r2, r1
 80032e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80032e6:	4649      	mov	r1, r9
 80032e8:	414b      	adcs	r3, r1
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032f8:	4659      	mov	r1, fp
 80032fa:	00cb      	lsls	r3, r1, #3
 80032fc:	4651      	mov	r1, sl
 80032fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003302:	4651      	mov	r1, sl
 8003304:	00ca      	lsls	r2, r1, #3
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	4603      	mov	r3, r0
 800330c:	4642      	mov	r2, r8
 800330e:	189b      	adds	r3, r3, r2
 8003310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003314:	464b      	mov	r3, r9
 8003316:	460a      	mov	r2, r1
 8003318:	eb42 0303 	adc.w	r3, r2, r3
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800332c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003334:	460b      	mov	r3, r1
 8003336:	18db      	adds	r3, r3, r3
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800333a:	4613      	mov	r3, r2
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800334a:	f7fc ffa1 	bl	8000290 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <UART_SetConfig+0x2d4>)
 8003354:	fba3 1302 	umull	r1, r3, r3, r2
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	2164      	movs	r1, #100	@ 0x64
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	3332      	adds	r3, #50	@ 0x32
 8003366:	4a08      	ldr	r2, [pc, #32]	@ (8003388 <UART_SetConfig+0x2d4>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	f003 0207 	and.w	r2, r3, #7
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4422      	add	r2, r4
 800337a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800337c:	e106      	b.n	800358c <UART_SetConfig+0x4d8>
 800337e:	bf00      	nop
 8003380:	40011000 	.word	0x40011000
 8003384:	40011400 	.word	0x40011400
 8003388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800338c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003390:	2200      	movs	r2, #0
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800339a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800339e:	4642      	mov	r2, r8
 80033a0:	464b      	mov	r3, r9
 80033a2:	1891      	adds	r1, r2, r2
 80033a4:	6239      	str	r1, [r7, #32]
 80033a6:	415b      	adcs	r3, r3
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ae:	4641      	mov	r1, r8
 80033b0:	1854      	adds	r4, r2, r1
 80033b2:	4649      	mov	r1, r9
 80033b4:	eb43 0501 	adc.w	r5, r3, r1
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	00eb      	lsls	r3, r5, #3
 80033c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c6:	00e2      	lsls	r2, r4, #3
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	4643      	mov	r3, r8
 80033ce:	18e3      	adds	r3, r4, r3
 80033d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033d4:	464b      	mov	r3, r9
 80033d6:	eb45 0303 	adc.w	r3, r5, r3
 80033da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033fa:	4629      	mov	r1, r5
 80033fc:	008b      	lsls	r3, r1, #2
 80033fe:	4621      	mov	r1, r4
 8003400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003404:	4621      	mov	r1, r4
 8003406:	008a      	lsls	r2, r1, #2
 8003408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800340c:	f7fc ff40 	bl	8000290 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4b60      	ldr	r3, [pc, #384]	@ (8003598 <UART_SetConfig+0x4e4>)
 8003416:	fba3 2302 	umull	r2, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	011c      	lsls	r4, r3, #4
 800341e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800342c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003430:	4642      	mov	r2, r8
 8003432:	464b      	mov	r3, r9
 8003434:	1891      	adds	r1, r2, r2
 8003436:	61b9      	str	r1, [r7, #24]
 8003438:	415b      	adcs	r3, r3
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003440:	4641      	mov	r1, r8
 8003442:	1851      	adds	r1, r2, r1
 8003444:	6139      	str	r1, [r7, #16]
 8003446:	4649      	mov	r1, r9
 8003448:	414b      	adcs	r3, r1
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003458:	4659      	mov	r1, fp
 800345a:	00cb      	lsls	r3, r1, #3
 800345c:	4651      	mov	r1, sl
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	4651      	mov	r1, sl
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	4603      	mov	r3, r0
 800346c:	4642      	mov	r2, r8
 800346e:	189b      	adds	r3, r3, r2
 8003470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003474:	464b      	mov	r3, r9
 8003476:	460a      	mov	r2, r1
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800348a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003498:	4649      	mov	r1, r9
 800349a:	008b      	lsls	r3, r1, #2
 800349c:	4641      	mov	r1, r8
 800349e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a2:	4641      	mov	r1, r8
 80034a4:	008a      	lsls	r2, r1, #2
 80034a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034aa:	f7fc fef1 	bl	8000290 <__aeabi_uldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	4b38      	ldr	r3, [pc, #224]	@ (8003598 <UART_SetConfig+0x4e4>)
 80034b6:	fba3 2301 	umull	r2, r3, r3, r1
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2264      	movs	r2, #100	@ 0x64
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	1acb      	subs	r3, r1, r3
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	3332      	adds	r3, #50	@ 0x32
 80034c8:	4a33      	ldr	r2, [pc, #204]	@ (8003598 <UART_SetConfig+0x4e4>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d4:	441c      	add	r4, r3
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034da:	2200      	movs	r2, #0
 80034dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80034de:	677a      	str	r2, [r7, #116]	@ 0x74
 80034e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	415b      	adcs	r3, r3
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f4:	4641      	mov	r1, r8
 80034f6:	1851      	adds	r1, r2, r1
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	4649      	mov	r1, r9
 80034fc:	414b      	adcs	r3, r1
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800350c:	4659      	mov	r1, fp
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4651      	mov	r1, sl
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4642      	mov	r2, r8
 8003522:	189b      	adds	r3, r3, r2
 8003524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003526:	464b      	mov	r3, r9
 8003528:	460a      	mov	r2, r1
 800352a:	eb42 0303 	adc.w	r3, r2, r3
 800352e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	663b      	str	r3, [r7, #96]	@ 0x60
 800353a:	667a      	str	r2, [r7, #100]	@ 0x64
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003548:	4649      	mov	r1, r9
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	4641      	mov	r1, r8
 800354e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003552:	4641      	mov	r1, r8
 8003554:	008a      	lsls	r2, r1, #2
 8003556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800355a:	f7fc fe99 	bl	8000290 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <UART_SetConfig+0x4e4>)
 8003564:	fba3 1302 	umull	r1, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2164      	movs	r1, #100	@ 0x64
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	3332      	adds	r3, #50	@ 0x32
 8003576:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <UART_SetConfig+0x4e4>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4422      	add	r2, r4
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003598:	51eb851f 	.word	0x51eb851f

0800359c <siprintf>:
 800359c:	b40e      	push	{r1, r2, r3}
 800359e:	b510      	push	{r4, lr}
 80035a0:	b09d      	sub	sp, #116	@ 0x74
 80035a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80035a4:	9002      	str	r0, [sp, #8]
 80035a6:	9006      	str	r0, [sp, #24]
 80035a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035ac:	480a      	ldr	r0, [pc, #40]	@ (80035d8 <siprintf+0x3c>)
 80035ae:	9107      	str	r1, [sp, #28]
 80035b0:	9104      	str	r1, [sp, #16]
 80035b2:	490a      	ldr	r1, [pc, #40]	@ (80035dc <siprintf+0x40>)
 80035b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80035b8:	9105      	str	r1, [sp, #20]
 80035ba:	2400      	movs	r4, #0
 80035bc:	a902      	add	r1, sp, #8
 80035be:	6800      	ldr	r0, [r0, #0]
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80035c4:	f000 f994 	bl	80038f0 <_svfiprintf_r>
 80035c8:	9b02      	ldr	r3, [sp, #8]
 80035ca:	701c      	strb	r4, [r3, #0]
 80035cc:	b01d      	add	sp, #116	@ 0x74
 80035ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d2:	b003      	add	sp, #12
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	2000000c 	.word	0x2000000c
 80035dc:	ffff0208 	.word	0xffff0208

080035e0 <memset>:
 80035e0:	4402      	add	r2, r0
 80035e2:	4603      	mov	r3, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d100      	bne.n	80035ea <memset+0xa>
 80035e8:	4770      	bx	lr
 80035ea:	f803 1b01 	strb.w	r1, [r3], #1
 80035ee:	e7f9      	b.n	80035e4 <memset+0x4>

080035f0 <__errno>:
 80035f0:	4b01      	ldr	r3, [pc, #4]	@ (80035f8 <__errno+0x8>)
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000000c 	.word	0x2000000c

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	@ (8003638 <__libc_init_array+0x3c>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2600      	movs	r6, #0
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4d0b      	ldr	r5, [pc, #44]	@ (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	@ (8003640 <__libc_init_array+0x44>)
 8003610:	f000 fc64 	bl	8003edc <_init>
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2600      	movs	r6, #0
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f855 3b04 	ldr.w	r3, [r5], #4
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f855 3b04 	ldr.w	r3, [r5], #4
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	08003f6c 	.word	0x08003f6c
 8003638:	08003f6c 	.word	0x08003f6c
 800363c:	08003f6c 	.word	0x08003f6c
 8003640:	08003f70 	.word	0x08003f70

08003644 <__retarget_lock_acquire_recursive>:
 8003644:	4770      	bx	lr

08003646 <__retarget_lock_release_recursive>:
 8003646:	4770      	bx	lr

08003648 <_free_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4605      	mov	r5, r0
 800364c:	2900      	cmp	r1, #0
 800364e:	d041      	beq.n	80036d4 <_free_r+0x8c>
 8003650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003654:	1f0c      	subs	r4, r1, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	18e4      	addlt	r4, r4, r3
 800365c:	f000 f8e0 	bl	8003820 <__malloc_lock>
 8003660:	4a1d      	ldr	r2, [pc, #116]	@ (80036d8 <_free_r+0x90>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	b933      	cbnz	r3, 8003674 <_free_r+0x2c>
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6014      	str	r4, [r2, #0]
 800366a:	4628      	mov	r0, r5
 800366c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003670:	f000 b8dc 	b.w	800382c <__malloc_unlock>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d908      	bls.n	800368a <_free_r+0x42>
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	1821      	adds	r1, r4, r0
 800367c:	428b      	cmp	r3, r1
 800367e:	bf01      	itttt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	1809      	addeq	r1, r1, r0
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	e7ed      	b.n	8003666 <_free_r+0x1e>
 800368a:	461a      	mov	r2, r3
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b10b      	cbz	r3, 8003694 <_free_r+0x4c>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d9fa      	bls.n	800368a <_free_r+0x42>
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	1850      	adds	r0, r2, r1
 8003698:	42a0      	cmp	r0, r4
 800369a:	d10b      	bne.n	80036b4 <_free_r+0x6c>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	4401      	add	r1, r0
 80036a0:	1850      	adds	r0, r2, r1
 80036a2:	4283      	cmp	r3, r0
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	d1e0      	bne.n	800366a <_free_r+0x22>
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6053      	str	r3, [r2, #4]
 80036ae:	4408      	add	r0, r1
 80036b0:	6010      	str	r0, [r2, #0]
 80036b2:	e7da      	b.n	800366a <_free_r+0x22>
 80036b4:	d902      	bls.n	80036bc <_free_r+0x74>
 80036b6:	230c      	movs	r3, #12
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	e7d6      	b.n	800366a <_free_r+0x22>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	1821      	adds	r1, r4, r0
 80036c0:	428b      	cmp	r3, r1
 80036c2:	bf04      	itt	eq
 80036c4:	6819      	ldreq	r1, [r3, #0]
 80036c6:	685b      	ldreq	r3, [r3, #4]
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	bf04      	itt	eq
 80036cc:	1809      	addeq	r1, r1, r0
 80036ce:	6021      	streq	r1, [r4, #0]
 80036d0:	6054      	str	r4, [r2, #4]
 80036d2:	e7ca      	b.n	800366a <_free_r+0x22>
 80036d4:	bd38      	pop	{r3, r4, r5, pc}
 80036d6:	bf00      	nop
 80036d8:	20000260 	.word	0x20000260

080036dc <sbrk_aligned>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4e0f      	ldr	r6, [pc, #60]	@ (800371c <sbrk_aligned+0x40>)
 80036e0:	460c      	mov	r4, r1
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	4605      	mov	r5, r0
 80036e6:	b911      	cbnz	r1, 80036ee <sbrk_aligned+0x12>
 80036e8:	f000 fba4 	bl	8003e34 <_sbrk_r>
 80036ec:	6030      	str	r0, [r6, #0]
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 fb9f 	bl	8003e34 <_sbrk_r>
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	d103      	bne.n	8003702 <sbrk_aligned+0x26>
 80036fa:	f04f 34ff 	mov.w	r4, #4294967295
 80036fe:	4620      	mov	r0, r4
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	1cc4      	adds	r4, r0, #3
 8003704:	f024 0403 	bic.w	r4, r4, #3
 8003708:	42a0      	cmp	r0, r4
 800370a:	d0f8      	beq.n	80036fe <sbrk_aligned+0x22>
 800370c:	1a21      	subs	r1, r4, r0
 800370e:	4628      	mov	r0, r5
 8003710:	f000 fb90 	bl	8003e34 <_sbrk_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d1f2      	bne.n	80036fe <sbrk_aligned+0x22>
 8003718:	e7ef      	b.n	80036fa <sbrk_aligned+0x1e>
 800371a:	bf00      	nop
 800371c:	2000025c 	.word	0x2000025c

08003720 <_malloc_r>:
 8003720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003724:	1ccd      	adds	r5, r1, #3
 8003726:	f025 0503 	bic.w	r5, r5, #3
 800372a:	3508      	adds	r5, #8
 800372c:	2d0c      	cmp	r5, #12
 800372e:	bf38      	it	cc
 8003730:	250c      	movcc	r5, #12
 8003732:	2d00      	cmp	r5, #0
 8003734:	4606      	mov	r6, r0
 8003736:	db01      	blt.n	800373c <_malloc_r+0x1c>
 8003738:	42a9      	cmp	r1, r5
 800373a:	d904      	bls.n	8003746 <_malloc_r+0x26>
 800373c:	230c      	movs	r3, #12
 800373e:	6033      	str	r3, [r6, #0]
 8003740:	2000      	movs	r0, #0
 8003742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800381c <_malloc_r+0xfc>
 800374a:	f000 f869 	bl	8003820 <__malloc_lock>
 800374e:	f8d8 3000 	ldr.w	r3, [r8]
 8003752:	461c      	mov	r4, r3
 8003754:	bb44      	cbnz	r4, 80037a8 <_malloc_r+0x88>
 8003756:	4629      	mov	r1, r5
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff ffbf 	bl	80036dc <sbrk_aligned>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	4604      	mov	r4, r0
 8003762:	d158      	bne.n	8003816 <_malloc_r+0xf6>
 8003764:	f8d8 4000 	ldr.w	r4, [r8]
 8003768:	4627      	mov	r7, r4
 800376a:	2f00      	cmp	r7, #0
 800376c:	d143      	bne.n	80037f6 <_malloc_r+0xd6>
 800376e:	2c00      	cmp	r4, #0
 8003770:	d04b      	beq.n	800380a <_malloc_r+0xea>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	4639      	mov	r1, r7
 8003776:	4630      	mov	r0, r6
 8003778:	eb04 0903 	add.w	r9, r4, r3
 800377c:	f000 fb5a 	bl	8003e34 <_sbrk_r>
 8003780:	4581      	cmp	r9, r0
 8003782:	d142      	bne.n	800380a <_malloc_r+0xea>
 8003784:	6821      	ldr	r1, [r4, #0]
 8003786:	1a6d      	subs	r5, r5, r1
 8003788:	4629      	mov	r1, r5
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff ffa6 	bl	80036dc <sbrk_aligned>
 8003790:	3001      	adds	r0, #1
 8003792:	d03a      	beq.n	800380a <_malloc_r+0xea>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	442b      	add	r3, r5
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	f8d8 3000 	ldr.w	r3, [r8]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	bb62      	cbnz	r2, 80037fc <_malloc_r+0xdc>
 80037a2:	f8c8 7000 	str.w	r7, [r8]
 80037a6:	e00f      	b.n	80037c8 <_malloc_r+0xa8>
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	1b52      	subs	r2, r2, r5
 80037ac:	d420      	bmi.n	80037f0 <_malloc_r+0xd0>
 80037ae:	2a0b      	cmp	r2, #11
 80037b0:	d917      	bls.n	80037e2 <_malloc_r+0xc2>
 80037b2:	1961      	adds	r1, r4, r5
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	6025      	str	r5, [r4, #0]
 80037b8:	bf18      	it	ne
 80037ba:	6059      	strne	r1, [r3, #4]
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	bf08      	it	eq
 80037c0:	f8c8 1000 	streq.w	r1, [r8]
 80037c4:	5162      	str	r2, [r4, r5]
 80037c6:	604b      	str	r3, [r1, #4]
 80037c8:	4630      	mov	r0, r6
 80037ca:	f000 f82f 	bl	800382c <__malloc_unlock>
 80037ce:	f104 000b 	add.w	r0, r4, #11
 80037d2:	1d23      	adds	r3, r4, #4
 80037d4:	f020 0007 	bic.w	r0, r0, #7
 80037d8:	1ac2      	subs	r2, r0, r3
 80037da:	bf1c      	itt	ne
 80037dc:	1a1b      	subne	r3, r3, r0
 80037de:	50a3      	strne	r3, [r4, r2]
 80037e0:	e7af      	b.n	8003742 <_malloc_r+0x22>
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	bf0c      	ite	eq
 80037e8:	f8c8 2000 	streq.w	r2, [r8]
 80037ec:	605a      	strne	r2, [r3, #4]
 80037ee:	e7eb      	b.n	80037c8 <_malloc_r+0xa8>
 80037f0:	4623      	mov	r3, r4
 80037f2:	6864      	ldr	r4, [r4, #4]
 80037f4:	e7ae      	b.n	8003754 <_malloc_r+0x34>
 80037f6:	463c      	mov	r4, r7
 80037f8:	687f      	ldr	r7, [r7, #4]
 80037fa:	e7b6      	b.n	800376a <_malloc_r+0x4a>
 80037fc:	461a      	mov	r2, r3
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	d1fb      	bne.n	80037fc <_malloc_r+0xdc>
 8003804:	2300      	movs	r3, #0
 8003806:	6053      	str	r3, [r2, #4]
 8003808:	e7de      	b.n	80037c8 <_malloc_r+0xa8>
 800380a:	230c      	movs	r3, #12
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	4630      	mov	r0, r6
 8003810:	f000 f80c 	bl	800382c <__malloc_unlock>
 8003814:	e794      	b.n	8003740 <_malloc_r+0x20>
 8003816:	6005      	str	r5, [r0, #0]
 8003818:	e7d6      	b.n	80037c8 <_malloc_r+0xa8>
 800381a:	bf00      	nop
 800381c:	20000260 	.word	0x20000260

08003820 <__malloc_lock>:
 8003820:	4801      	ldr	r0, [pc, #4]	@ (8003828 <__malloc_lock+0x8>)
 8003822:	f7ff bf0f 	b.w	8003644 <__retarget_lock_acquire_recursive>
 8003826:	bf00      	nop
 8003828:	20000258 	.word	0x20000258

0800382c <__malloc_unlock>:
 800382c:	4801      	ldr	r0, [pc, #4]	@ (8003834 <__malloc_unlock+0x8>)
 800382e:	f7ff bf0a 	b.w	8003646 <__retarget_lock_release_recursive>
 8003832:	bf00      	nop
 8003834:	20000258 	.word	0x20000258

08003838 <__ssputs_r>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	688e      	ldr	r6, [r1, #8]
 800383e:	461f      	mov	r7, r3
 8003840:	42be      	cmp	r6, r7
 8003842:	680b      	ldr	r3, [r1, #0]
 8003844:	4682      	mov	sl, r0
 8003846:	460c      	mov	r4, r1
 8003848:	4690      	mov	r8, r2
 800384a:	d82d      	bhi.n	80038a8 <__ssputs_r+0x70>
 800384c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003854:	d026      	beq.n	80038a4 <__ssputs_r+0x6c>
 8003856:	6965      	ldr	r5, [r4, #20]
 8003858:	6909      	ldr	r1, [r1, #16]
 800385a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800385e:	eba3 0901 	sub.w	r9, r3, r1
 8003862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003866:	1c7b      	adds	r3, r7, #1
 8003868:	444b      	add	r3, r9
 800386a:	106d      	asrs	r5, r5, #1
 800386c:	429d      	cmp	r5, r3
 800386e:	bf38      	it	cc
 8003870:	461d      	movcc	r5, r3
 8003872:	0553      	lsls	r3, r2, #21
 8003874:	d527      	bpl.n	80038c6 <__ssputs_r+0x8e>
 8003876:	4629      	mov	r1, r5
 8003878:	f7ff ff52 	bl	8003720 <_malloc_r>
 800387c:	4606      	mov	r6, r0
 800387e:	b360      	cbz	r0, 80038da <__ssputs_r+0xa2>
 8003880:	6921      	ldr	r1, [r4, #16]
 8003882:	464a      	mov	r2, r9
 8003884:	f000 fae6 	bl	8003e54 <memcpy>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800388e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	6126      	str	r6, [r4, #16]
 8003896:	6165      	str	r5, [r4, #20]
 8003898:	444e      	add	r6, r9
 800389a:	eba5 0509 	sub.w	r5, r5, r9
 800389e:	6026      	str	r6, [r4, #0]
 80038a0:	60a5      	str	r5, [r4, #8]
 80038a2:	463e      	mov	r6, r7
 80038a4:	42be      	cmp	r6, r7
 80038a6:	d900      	bls.n	80038aa <__ssputs_r+0x72>
 80038a8:	463e      	mov	r6, r7
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	4632      	mov	r2, r6
 80038ae:	4641      	mov	r1, r8
 80038b0:	f000 faa6 	bl	8003e00 <memmove>
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	1b9b      	subs	r3, r3, r6
 80038b8:	60a3      	str	r3, [r4, #8]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	4433      	add	r3, r6
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	2000      	movs	r0, #0
 80038c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c6:	462a      	mov	r2, r5
 80038c8:	f000 fad2 	bl	8003e70 <_realloc_r>
 80038cc:	4606      	mov	r6, r0
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1e0      	bne.n	8003894 <__ssputs_r+0x5c>
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	4650      	mov	r0, sl
 80038d6:	f7ff feb7 	bl	8003648 <_free_r>
 80038da:	230c      	movs	r3, #12
 80038dc:	f8ca 3000 	str.w	r3, [sl]
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	e7e9      	b.n	80038c2 <__ssputs_r+0x8a>
	...

080038f0 <_svfiprintf_r>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	4698      	mov	r8, r3
 80038f6:	898b      	ldrh	r3, [r1, #12]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	b09d      	sub	sp, #116	@ 0x74
 80038fc:	4607      	mov	r7, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4614      	mov	r4, r2
 8003902:	d510      	bpl.n	8003926 <_svfiprintf_r+0x36>
 8003904:	690b      	ldr	r3, [r1, #16]
 8003906:	b973      	cbnz	r3, 8003926 <_svfiprintf_r+0x36>
 8003908:	2140      	movs	r1, #64	@ 0x40
 800390a:	f7ff ff09 	bl	8003720 <_malloc_r>
 800390e:	6028      	str	r0, [r5, #0]
 8003910:	6128      	str	r0, [r5, #16]
 8003912:	b930      	cbnz	r0, 8003922 <_svfiprintf_r+0x32>
 8003914:	230c      	movs	r3, #12
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	b01d      	add	sp, #116	@ 0x74
 800391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003922:	2340      	movs	r3, #64	@ 0x40
 8003924:	616b      	str	r3, [r5, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	9309      	str	r3, [sp, #36]	@ 0x24
 800392a:	2320      	movs	r3, #32
 800392c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003930:	f8cd 800c 	str.w	r8, [sp, #12]
 8003934:	2330      	movs	r3, #48	@ 0x30
 8003936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ad4 <_svfiprintf_r+0x1e4>
 800393a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800393e:	f04f 0901 	mov.w	r9, #1
 8003942:	4623      	mov	r3, r4
 8003944:	469a      	mov	sl, r3
 8003946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800394a:	b10a      	cbz	r2, 8003950 <_svfiprintf_r+0x60>
 800394c:	2a25      	cmp	r2, #37	@ 0x25
 800394e:	d1f9      	bne.n	8003944 <_svfiprintf_r+0x54>
 8003950:	ebba 0b04 	subs.w	fp, sl, r4
 8003954:	d00b      	beq.n	800396e <_svfiprintf_r+0x7e>
 8003956:	465b      	mov	r3, fp
 8003958:	4622      	mov	r2, r4
 800395a:	4629      	mov	r1, r5
 800395c:	4638      	mov	r0, r7
 800395e:	f7ff ff6b 	bl	8003838 <__ssputs_r>
 8003962:	3001      	adds	r0, #1
 8003964:	f000 80a7 	beq.w	8003ab6 <_svfiprintf_r+0x1c6>
 8003968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800396a:	445a      	add	r2, fp
 800396c:	9209      	str	r2, [sp, #36]	@ 0x24
 800396e:	f89a 3000 	ldrb.w	r3, [sl]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 809f 	beq.w	8003ab6 <_svfiprintf_r+0x1c6>
 8003978:	2300      	movs	r3, #0
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003982:	f10a 0a01 	add.w	sl, sl, #1
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800398e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003990:	4654      	mov	r4, sl
 8003992:	2205      	movs	r2, #5
 8003994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003998:	484e      	ldr	r0, [pc, #312]	@ (8003ad4 <_svfiprintf_r+0x1e4>)
 800399a:	f7fc fc29 	bl	80001f0 <memchr>
 800399e:	9a04      	ldr	r2, [sp, #16]
 80039a0:	b9d8      	cbnz	r0, 80039da <_svfiprintf_r+0xea>
 80039a2:	06d0      	lsls	r0, r2, #27
 80039a4:	bf44      	itt	mi
 80039a6:	2320      	movmi	r3, #32
 80039a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039ac:	0711      	lsls	r1, r2, #28
 80039ae:	bf44      	itt	mi
 80039b0:	232b      	movmi	r3, #43	@ 0x2b
 80039b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039b6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80039bc:	d015      	beq.n	80039ea <_svfiprintf_r+0xfa>
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	4654      	mov	r4, sl
 80039c2:	2000      	movs	r0, #0
 80039c4:	f04f 0c0a 	mov.w	ip, #10
 80039c8:	4621      	mov	r1, r4
 80039ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ce:	3b30      	subs	r3, #48	@ 0x30
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	d94b      	bls.n	8003a6c <_svfiprintf_r+0x17c>
 80039d4:	b1b0      	cbz	r0, 8003a04 <_svfiprintf_r+0x114>
 80039d6:	9207      	str	r2, [sp, #28]
 80039d8:	e014      	b.n	8003a04 <_svfiprintf_r+0x114>
 80039da:	eba0 0308 	sub.w	r3, r0, r8
 80039de:	fa09 f303 	lsl.w	r3, r9, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	46a2      	mov	sl, r4
 80039e8:	e7d2      	b.n	8003990 <_svfiprintf_r+0xa0>
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	9103      	str	r1, [sp, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfbb      	ittet	lt
 80039f6:	425b      	neglt	r3, r3
 80039f8:	f042 0202 	orrlt.w	r2, r2, #2
 80039fc:	9307      	strge	r3, [sp, #28]
 80039fe:	9307      	strlt	r3, [sp, #28]
 8003a00:	bfb8      	it	lt
 8003a02:	9204      	strlt	r2, [sp, #16]
 8003a04:	7823      	ldrb	r3, [r4, #0]
 8003a06:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a08:	d10a      	bne.n	8003a20 <_svfiprintf_r+0x130>
 8003a0a:	7863      	ldrb	r3, [r4, #1]
 8003a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a0e:	d132      	bne.n	8003a76 <_svfiprintf_r+0x186>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a1c:	3402      	adds	r4, #2
 8003a1e:	9305      	str	r3, [sp, #20]
 8003a20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ae4 <_svfiprintf_r+0x1f4>
 8003a24:	7821      	ldrb	r1, [r4, #0]
 8003a26:	2203      	movs	r2, #3
 8003a28:	4650      	mov	r0, sl
 8003a2a:	f7fc fbe1 	bl	80001f0 <memchr>
 8003a2e:	b138      	cbz	r0, 8003a40 <_svfiprintf_r+0x150>
 8003a30:	9b04      	ldr	r3, [sp, #16]
 8003a32:	eba0 000a 	sub.w	r0, r0, sl
 8003a36:	2240      	movs	r2, #64	@ 0x40
 8003a38:	4082      	lsls	r2, r0
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	3401      	adds	r4, #1
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a44:	4824      	ldr	r0, [pc, #144]	@ (8003ad8 <_svfiprintf_r+0x1e8>)
 8003a46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a4a:	2206      	movs	r2, #6
 8003a4c:	f7fc fbd0 	bl	80001f0 <memchr>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d036      	beq.n	8003ac2 <_svfiprintf_r+0x1d2>
 8003a54:	4b21      	ldr	r3, [pc, #132]	@ (8003adc <_svfiprintf_r+0x1ec>)
 8003a56:	bb1b      	cbnz	r3, 8003aa0 <_svfiprintf_r+0x1b0>
 8003a58:	9b03      	ldr	r3, [sp, #12]
 8003a5a:	3307      	adds	r3, #7
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	3308      	adds	r3, #8
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a66:	4433      	add	r3, r6
 8003a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6a:	e76a      	b.n	8003942 <_svfiprintf_r+0x52>
 8003a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a70:	460c      	mov	r4, r1
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7a8      	b.n	80039c8 <_svfiprintf_r+0xd8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	3401      	adds	r4, #1
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f04f 0c0a 	mov.w	ip, #10
 8003a82:	4620      	mov	r0, r4
 8003a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a88:	3a30      	subs	r2, #48	@ 0x30
 8003a8a:	2a09      	cmp	r2, #9
 8003a8c:	d903      	bls.n	8003a96 <_svfiprintf_r+0x1a6>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0c6      	beq.n	8003a20 <_svfiprintf_r+0x130>
 8003a92:	9105      	str	r1, [sp, #20]
 8003a94:	e7c4      	b.n	8003a20 <_svfiprintf_r+0x130>
 8003a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e7f0      	b.n	8003a82 <_svfiprintf_r+0x192>
 8003aa0:	ab03      	add	r3, sp, #12
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <_svfiprintf_r+0x1f0>)
 8003aa8:	a904      	add	r1, sp, #16
 8003aaa:	4638      	mov	r0, r7
 8003aac:	f3af 8000 	nop.w
 8003ab0:	1c42      	adds	r2, r0, #1
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	d1d6      	bne.n	8003a64 <_svfiprintf_r+0x174>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	065b      	lsls	r3, r3, #25
 8003aba:	f53f af2d 	bmi.w	8003918 <_svfiprintf_r+0x28>
 8003abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ac0:	e72c      	b.n	800391c <_svfiprintf_r+0x2c>
 8003ac2:	ab03      	add	r3, sp, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <_svfiprintf_r+0x1f0>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	4638      	mov	r0, r7
 8003ace:	f000 f879 	bl	8003bc4 <_printf_i>
 8003ad2:	e7ed      	b.n	8003ab0 <_svfiprintf_r+0x1c0>
 8003ad4:	08003f30 	.word	0x08003f30
 8003ad8:	08003f3a 	.word	0x08003f3a
 8003adc:	00000000 	.word	0x00000000
 8003ae0:	08003839 	.word	0x08003839
 8003ae4:	08003f36 	.word	0x08003f36

08003ae8 <_printf_common>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	4616      	mov	r6, r2
 8003aee:	4698      	mov	r8, r3
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bfb8      	it	lt
 8003afc:	4613      	movlt	r3, r2
 8003afe:	6033      	str	r3, [r6, #0]
 8003b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b04:	4607      	mov	r7, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	b10a      	cbz	r2, 8003b0e <_printf_common+0x26>
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0699      	lsls	r1, r3, #26
 8003b12:	bf42      	ittt	mi
 8003b14:	6833      	ldrmi	r3, [r6, #0]
 8003b16:	3302      	addmi	r3, #2
 8003b18:	6033      	strmi	r3, [r6, #0]
 8003b1a:	6825      	ldr	r5, [r4, #0]
 8003b1c:	f015 0506 	ands.w	r5, r5, #6
 8003b20:	d106      	bne.n	8003b30 <_printf_common+0x48>
 8003b22:	f104 0a19 	add.w	sl, r4, #25
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	6832      	ldr	r2, [r6, #0]
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dc26      	bgt.n	8003b7e <_printf_common+0x96>
 8003b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	3b00      	subs	r3, #0
 8003b38:	bf18      	it	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	0692      	lsls	r2, r2, #26
 8003b3e:	d42b      	bmi.n	8003b98 <_printf_common+0xb0>
 8003b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b44:	4641      	mov	r1, r8
 8003b46:	4638      	mov	r0, r7
 8003b48:	47c8      	blx	r9
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d01e      	beq.n	8003b8c <_printf_common+0xa4>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	6922      	ldr	r2, [r4, #16]
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	bf02      	ittt	eq
 8003b5a:	68e5      	ldreq	r5, [r4, #12]
 8003b5c:	6833      	ldreq	r3, [r6, #0]
 8003b5e:	1aed      	subeq	r5, r5, r3
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	bf0c      	ite	eq
 8003b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b68:	2500      	movne	r5, #0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	bfc4      	itt	gt
 8003b6e:	1a9b      	subgt	r3, r3, r2
 8003b70:	18ed      	addgt	r5, r5, r3
 8003b72:	2600      	movs	r6, #0
 8003b74:	341a      	adds	r4, #26
 8003b76:	42b5      	cmp	r5, r6
 8003b78:	d11a      	bne.n	8003bb0 <_printf_common+0xc8>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	e008      	b.n	8003b90 <_printf_common+0xa8>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4652      	mov	r2, sl
 8003b82:	4641      	mov	r1, r8
 8003b84:	4638      	mov	r0, r7
 8003b86:	47c8      	blx	r9
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d103      	bne.n	8003b94 <_printf_common+0xac>
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b94:	3501      	adds	r5, #1
 8003b96:	e7c6      	b.n	8003b26 <_printf_common+0x3e>
 8003b98:	18e1      	adds	r1, r4, r3
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	2030      	movs	r0, #48	@ 0x30
 8003b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ba2:	4422      	add	r2, r4
 8003ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bac:	3302      	adds	r3, #2
 8003bae:	e7c7      	b.n	8003b40 <_printf_common+0x58>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c8      	blx	r9
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d0e6      	beq.n	8003b8c <_printf_common+0xa4>
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7d9      	b.n	8003b76 <_printf_common+0x8e>
	...

08003bc4 <_printf_i>:
 8003bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	7e0f      	ldrb	r7, [r1, #24]
 8003bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bcc:	2f78      	cmp	r7, #120	@ 0x78
 8003bce:	4691      	mov	r9, r2
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	469a      	mov	sl, r3
 8003bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bda:	d807      	bhi.n	8003bec <_printf_i+0x28>
 8003bdc:	2f62      	cmp	r7, #98	@ 0x62
 8003bde:	d80a      	bhi.n	8003bf6 <_printf_i+0x32>
 8003be0:	2f00      	cmp	r7, #0
 8003be2:	f000 80d1 	beq.w	8003d88 <_printf_i+0x1c4>
 8003be6:	2f58      	cmp	r7, #88	@ 0x58
 8003be8:	f000 80b8 	beq.w	8003d5c <_printf_i+0x198>
 8003bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf4:	e03a      	b.n	8003c6c <_printf_i+0xa8>
 8003bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bfa:	2b15      	cmp	r3, #21
 8003bfc:	d8f6      	bhi.n	8003bec <_printf_i+0x28>
 8003bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8003c04 <_printf_i+0x40>)
 8003c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c71 	.word	0x08003c71
 8003c0c:	08003bed 	.word	0x08003bed
 8003c10:	08003bed 	.word	0x08003bed
 8003c14:	08003bed 	.word	0x08003bed
 8003c18:	08003bed 	.word	0x08003bed
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003bed 	.word	0x08003bed
 8003c24:	08003bed 	.word	0x08003bed
 8003c28:	08003bed 	.word	0x08003bed
 8003c2c:	08003bed 	.word	0x08003bed
 8003c30:	08003d6f 	.word	0x08003d6f
 8003c34:	08003c9b 	.word	0x08003c9b
 8003c38:	08003d29 	.word	0x08003d29
 8003c3c:	08003bed 	.word	0x08003bed
 8003c40:	08003bed 	.word	0x08003bed
 8003c44:	08003d91 	.word	0x08003d91
 8003c48:	08003bed 	.word	0x08003bed
 8003c4c:	08003c9b 	.word	0x08003c9b
 8003c50:	08003bed 	.word	0x08003bed
 8003c54:	08003bed 	.word	0x08003bed
 8003c58:	08003d31 	.word	0x08003d31
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6032      	str	r2, [r6, #0]
 8003c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e09c      	b.n	8003daa <_printf_i+0x1e6>
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	6031      	str	r1, [r6, #0]
 8003c78:	0606      	lsls	r6, r0, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0xbc>
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	e003      	b.n	8003c88 <_printf_i+0xc4>
 8003c80:	0645      	lsls	r5, r0, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0xb8>
 8003c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	da03      	bge.n	8003c94 <_printf_i+0xd0>
 8003c8c:	232d      	movs	r3, #45	@ 0x2d
 8003c8e:	426d      	negs	r5, r5
 8003c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c94:	4858      	ldr	r0, [pc, #352]	@ (8003df8 <_printf_i+0x234>)
 8003c96:	230a      	movs	r3, #10
 8003c98:	e011      	b.n	8003cbe <_printf_i+0xfa>
 8003c9a:	6821      	ldr	r1, [r4, #0]
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	0608      	lsls	r0, r1, #24
 8003ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca4:	d402      	bmi.n	8003cac <_printf_i+0xe8>
 8003ca6:	0649      	lsls	r1, r1, #25
 8003ca8:	bf48      	it	mi
 8003caa:	b2ad      	uxthmi	r5, r5
 8003cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cae:	4852      	ldr	r0, [pc, #328]	@ (8003df8 <_printf_i+0x234>)
 8003cb0:	6033      	str	r3, [r6, #0]
 8003cb2:	bf14      	ite	ne
 8003cb4:	230a      	movne	r3, #10
 8003cb6:	2308      	moveq	r3, #8
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cbe:	6866      	ldr	r6, [r4, #4]
 8003cc0:	60a6      	str	r6, [r4, #8]
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	db05      	blt.n	8003cd2 <_printf_i+0x10e>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	432e      	orrs	r6, r5
 8003cca:	f021 0104 	bic.w	r1, r1, #4
 8003cce:	6021      	str	r1, [r4, #0]
 8003cd0:	d04b      	beq.n	8003d6a <_printf_i+0x1a6>
 8003cd2:	4616      	mov	r6, r2
 8003cd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cd8:	fb03 5711 	mls	r7, r3, r1, r5
 8003cdc:	5dc7      	ldrb	r7, [r0, r7]
 8003cde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce2:	462f      	mov	r7, r5
 8003ce4:	42bb      	cmp	r3, r7
 8003ce6:	460d      	mov	r5, r1
 8003ce8:	d9f4      	bls.n	8003cd4 <_printf_i+0x110>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d10b      	bne.n	8003d06 <_printf_i+0x142>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	07df      	lsls	r7, r3, #31
 8003cf2:	d508      	bpl.n	8003d06 <_printf_i+0x142>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6861      	ldr	r1, [r4, #4]
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	bfde      	ittt	le
 8003cfc:	2330      	movle	r3, #48	@ 0x30
 8003cfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d06:	1b92      	subs	r2, r2, r6
 8003d08:	6122      	str	r2, [r4, #16]
 8003d0a:	f8cd a000 	str.w	sl, [sp]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	aa03      	add	r2, sp, #12
 8003d12:	4621      	mov	r1, r4
 8003d14:	4640      	mov	r0, r8
 8003d16:	f7ff fee7 	bl	8003ae8 <_printf_common>
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d14a      	bne.n	8003db4 <_printf_i+0x1f0>
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	b004      	add	sp, #16
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	4832      	ldr	r0, [pc, #200]	@ (8003dfc <_printf_i+0x238>)
 8003d32:	2778      	movs	r7, #120	@ 0x78
 8003d34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	061f      	lsls	r7, r3, #24
 8003d3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d42:	d402      	bmi.n	8003d4a <_printf_i+0x186>
 8003d44:	065f      	lsls	r7, r3, #25
 8003d46:	bf48      	it	mi
 8003d48:	b2ad      	uxthmi	r5, r5
 8003d4a:	6031      	str	r1, [r6, #0]
 8003d4c:	07d9      	lsls	r1, r3, #31
 8003d4e:	bf44      	itt	mi
 8003d50:	f043 0320 	orrmi.w	r3, r3, #32
 8003d54:	6023      	strmi	r3, [r4, #0]
 8003d56:	b11d      	cbz	r5, 8003d60 <_printf_i+0x19c>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	e7ad      	b.n	8003cb8 <_printf_i+0xf4>
 8003d5c:	4826      	ldr	r0, [pc, #152]	@ (8003df8 <_printf_i+0x234>)
 8003d5e:	e7e9      	b.n	8003d34 <_printf_i+0x170>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	e7f6      	b.n	8003d58 <_printf_i+0x194>
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	e7bd      	b.n	8003cea <_printf_i+0x126>
 8003d6e:	6833      	ldr	r3, [r6, #0]
 8003d70:	6825      	ldr	r5, [r4, #0]
 8003d72:	6961      	ldr	r1, [r4, #20]
 8003d74:	1d18      	adds	r0, r3, #4
 8003d76:	6030      	str	r0, [r6, #0]
 8003d78:	062e      	lsls	r6, r5, #24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	d501      	bpl.n	8003d82 <_printf_i+0x1be>
 8003d7e:	6019      	str	r1, [r3, #0]
 8003d80:	e002      	b.n	8003d88 <_printf_i+0x1c4>
 8003d82:	0668      	lsls	r0, r5, #25
 8003d84:	d5fb      	bpl.n	8003d7e <_printf_i+0x1ba>
 8003d86:	8019      	strh	r1, [r3, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	e7bc      	b.n	8003d0a <_printf_i+0x146>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	6032      	str	r2, [r6, #0]
 8003d96:	681e      	ldr	r6, [r3, #0]
 8003d98:	6862      	ldr	r2, [r4, #4]
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f7fc fa27 	bl	80001f0 <memchr>
 8003da2:	b108      	cbz	r0, 8003da8 <_printf_i+0x1e4>
 8003da4:	1b80      	subs	r0, r0, r6
 8003da6:	6060      	str	r0, [r4, #4]
 8003da8:	6863      	ldr	r3, [r4, #4]
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db2:	e7aa      	b.n	8003d0a <_printf_i+0x146>
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	4632      	mov	r2, r6
 8003db8:	4649      	mov	r1, r9
 8003dba:	4640      	mov	r0, r8
 8003dbc:	47d0      	blx	sl
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d0ad      	beq.n	8003d1e <_printf_i+0x15a>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	079b      	lsls	r3, r3, #30
 8003dc6:	d413      	bmi.n	8003df0 <_printf_i+0x22c>
 8003dc8:	68e0      	ldr	r0, [r4, #12]
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	4298      	cmp	r0, r3
 8003dce:	bfb8      	it	lt
 8003dd0:	4618      	movlt	r0, r3
 8003dd2:	e7a6      	b.n	8003d22 <_printf_i+0x15e>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4649      	mov	r1, r9
 8003dda:	4640      	mov	r0, r8
 8003ddc:	47d0      	blx	sl
 8003dde:	3001      	adds	r0, #1
 8003de0:	d09d      	beq.n	8003d1e <_printf_i+0x15a>
 8003de2:	3501      	adds	r5, #1
 8003de4:	68e3      	ldr	r3, [r4, #12]
 8003de6:	9903      	ldr	r1, [sp, #12]
 8003de8:	1a5b      	subs	r3, r3, r1
 8003dea:	42ab      	cmp	r3, r5
 8003dec:	dcf2      	bgt.n	8003dd4 <_printf_i+0x210>
 8003dee:	e7eb      	b.n	8003dc8 <_printf_i+0x204>
 8003df0:	2500      	movs	r5, #0
 8003df2:	f104 0619 	add.w	r6, r4, #25
 8003df6:	e7f5      	b.n	8003de4 <_printf_i+0x220>
 8003df8:	08003f41 	.word	0x08003f41
 8003dfc:	08003f52 	.word	0x08003f52

08003e00 <memmove>:
 8003e00:	4288      	cmp	r0, r1
 8003e02:	b510      	push	{r4, lr}
 8003e04:	eb01 0402 	add.w	r4, r1, r2
 8003e08:	d902      	bls.n	8003e10 <memmove+0x10>
 8003e0a:	4284      	cmp	r4, r0
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	d807      	bhi.n	8003e20 <memmove+0x20>
 8003e10:	1e43      	subs	r3, r0, #1
 8003e12:	42a1      	cmp	r1, r4
 8003e14:	d008      	beq.n	8003e28 <memmove+0x28>
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1e:	e7f8      	b.n	8003e12 <memmove+0x12>
 8003e20:	4402      	add	r2, r0
 8003e22:	4601      	mov	r1, r0
 8003e24:	428a      	cmp	r2, r1
 8003e26:	d100      	bne.n	8003e2a <memmove+0x2a>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e32:	e7f7      	b.n	8003e24 <memmove+0x24>

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	@ (8003e50 <_sbrk_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fc ffb2 	bl	8000da8 <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	20000254 	.word	0x20000254

08003e54 <memcpy>:
 8003e54:	440a      	add	r2, r1
 8003e56:	4291      	cmp	r1, r2
 8003e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e5c:	d100      	bne.n	8003e60 <memcpy+0xc>
 8003e5e:	4770      	bx	lr
 8003e60:	b510      	push	{r4, lr}
 8003e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	d1f9      	bne.n	8003e62 <memcpy+0xe>
 8003e6e:	bd10      	pop	{r4, pc}

08003e70 <_realloc_r>:
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	4607      	mov	r7, r0
 8003e76:	4614      	mov	r4, r2
 8003e78:	460d      	mov	r5, r1
 8003e7a:	b921      	cbnz	r1, 8003e86 <_realloc_r+0x16>
 8003e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	4611      	mov	r1, r2
 8003e82:	f7ff bc4d 	b.w	8003720 <_malloc_r>
 8003e86:	b92a      	cbnz	r2, 8003e94 <_realloc_r+0x24>
 8003e88:	f7ff fbde 	bl	8003648 <_free_r>
 8003e8c:	4625      	mov	r5, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	f000 f81a 	bl	8003ecc <_malloc_usable_size_r>
 8003e98:	4284      	cmp	r4, r0
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	d802      	bhi.n	8003ea4 <_realloc_r+0x34>
 8003e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ea2:	d8f4      	bhi.n	8003e8e <_realloc_r+0x1e>
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f7ff fc3a 	bl	8003720 <_malloc_r>
 8003eac:	4680      	mov	r8, r0
 8003eae:	b908      	cbnz	r0, 8003eb4 <_realloc_r+0x44>
 8003eb0:	4645      	mov	r5, r8
 8003eb2:	e7ec      	b.n	8003e8e <_realloc_r+0x1e>
 8003eb4:	42b4      	cmp	r4, r6
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	bf28      	it	cs
 8003ebc:	4632      	movcs	r2, r6
 8003ebe:	f7ff ffc9 	bl	8003e54 <memcpy>
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff fbbf 	bl	8003648 <_free_r>
 8003eca:	e7f1      	b.n	8003eb0 <_realloc_r+0x40>

08003ecc <_malloc_usable_size_r>:
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f18      	subs	r0, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbc      	itt	lt
 8003ed6:	580b      	ldrlt	r3, [r1, r0]
 8003ed8:	18c0      	addlt	r0, r0, r3
 8003eda:	4770      	bx	lr

08003edc <_init>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr

08003ee8 <_fini>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr
